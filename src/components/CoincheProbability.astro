---
const couleurs = ["Coeur", "Carreau", "Pique", "Trèfle"];
const encheres = [80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 250, 500];
const CARTES = {
  "7": 0,
  "8": 1,
  "9": 2,
  "10": 3,
  Valet: 4,
  Dame: 5,
  Roi: 6,
  As: 7,
};
---

<div class="calculator">
  <div class="hand-input">
    <h2>Vos cartes</h2>
    <div class="cards-selection">
      {couleurs.map((couleur) => (
        <div class="suit-group">
          <h3>{couleur}</h3>
          <div class="cards">
            {Object.keys(CARTES).map((carte) => (
              <label>
                <input 
                  type="checkbox" 
                  name="cards" 
                  value={`${carte}-${couleur}`}
                  data-card={carte}
                  data-suit={couleur}
                />
                {carte}
              </label>
            ))}
          </div>
        </div>
      ))}
    </div>
  </div>
  <div id="combinations" class="combinations-section">
    <h2>Combinaisons détectées</h2>
  </div>
  
  <div class="bidding-section">
    <h2>Enchères</h2>
    <div class="bidding-input">
      <select id="player">
        <option value="adversaire1">Adversaire 1</option>
        <option value="partenaire">Partenaire</option>
        <option value="adversaire2">Adversaire 2</option>
      </select>
      <select id="bid-type">
        <option value="passe">Passe</option>
        <option value="enchere">Enchère</option>
      </select>
      <select id="bid-amount" disabled>
        <option value="">Montant</option>
        {encheres.map((montant) => (
          <option value={montant}>{montant}</option>
        ))}
          <option value="10">+10</option>
          <option value="20">+20</option>
          <option value="30">+30</option>
          <option value="40">+40</option>
          <option value="50">+50</option>
      </select>
      <select id="bid-suit" disabled>
        <option value="">Couleur</option>
        {couleurs.map((couleur) => (
          <option value={couleur}>{couleur}</option>
        ))}
      </select>
      <button id="add-bid">Ajouter l'enchère</button>
    </div>
    <div id="bidding-history"></div>
  </div>

  <div class="probabilities">
    <h2>Cartes probables par joueur</h2>
    <div class="players-grid">
      <div class="player-cards">
        <h3>Partenaire</h3>
        <div id="partenaire-likely-cards" class="likely-cards"></div>
      </div>
      <div class="player-cards">
        <h3>Adversaire 1</h3>
        <div id="adversaire1-likely-cards" class="likely-cards"></div>
      </div>
      <div class="player-cards">
        <h3>Adversaire 2</h3>
        <div id="adversaire2-likely-cards" class="likely-cards"></div>
      </div>
    </div>
  </div>
</div>

<script>
const CARTES = {
  "7": 0,
  "8": 1,
  "9": 2,
  "10": 3,
  Valet: 4,
  Dame: 5,
  Roi: 6,
  As: 7,
};
const couleurs = ["Coeur", "Carreau", "Pique", "Trèfle"];
const encheres = [80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 250, 500];

document.addEventListener("DOMContentLoaded", () => {
  let selectedCards = new Set();
  let biddingHistory = [];

  // Modification de la gestion des enchères
  document.getElementById("add-bid").addEventListener("click", () => {
    const player = document.getElementById("player").value;
    const bidType = document.getElementById("bid-type").value;
    const amount = document.getElementById("bid-amount").value;
    const suit = document.getElementById("bid-suit").value;

    // Si l'enchère est une valeur +10, +20, etc., on la traite différemment
    let adjustedAmount = amount;
    if (amount.includes('+')) {
      adjustedAmount = parseInt(amount.replace('+', ''));
      handleSpecialBids(player, adjustedAmount);  // Gestion des enchères spéciales
    }

    const bid = {
      player,
      type: bidType,
      amount: bidType === "enchere" ? adjustedAmount : null,
      suit: bidType === "enchere" ? suit : null,
    };

    biddingHistory.push(bid);

    const historyDiv = document.getElementById("bidding-history");
    const bidEntry = document.createElement("div");
    bidEntry.textContent =
      bidType === "passe"
        ? `${player}: Passe`
        : `${player}: ${adjustedAmount} à ${suit}`;
    historyDiv.appendChild(bidEntry);

    updateProbabilities();
  });

  function handleSpecialBids(player, amount) {
    // Traiter les enchères spéciales +10, +20, +30, etc.
    // Ex: Si un joueur mise +10, cela peut signifier qu'il a un As dans une autre couleur
    // ou s'il mise +20, cela peut signifier qu'il a une belote (Roi et Dame de la même couleur).

    biddingHistory.forEach((bid) => {
      if (bid.player !== player && bid.type === "enchere") {
        if (amount === 10) {
          // Augmenter les probabilités de l'As dans une autre couleur pour l'adversaire
          adjustProbabilitiesForOpponent(bid.player, "As", 0.15);
        } else if (amount === 20) {
          // Valet ou Belote
          adjustProbabilitiesForOpponent(bid.player, "Valet", 0.2);
          adjustProbabilitiesForOpponent(bid.player, "Roi", 0.2);
          adjustProbabilitiesForOpponent(bid.player, "Dame", 0.2);
        }
        // Ajouter d'autres cas pour +30, +40, +50 si nécessaire
      }
    });
  }

  function adjustProbabilitiesForOpponent(player, card, probability) {
    // Ajuster les probabilités pour un adversaire spécifique
    const suitProbabilities = {
      partenaire: document.getElementById("partenaire-likely-cards"),
      adversaire1: document.getElementById("adversaire1-likely-cards"),
      adversaire2: document.getElementById("adversaire2-likely-cards"),
    };

    if (suitProbabilities[player]) {
      const cardId = `${card}-*`;  // Utiliser '*' pour signifier qu'il s'agit de n'importe quelle couleur
      // Ajuster la probabilité pour cette carte
      suitProbabilities[player].querySelectorAll(`.likely-card`).forEach((cardElement) => {
        if (cardElement.querySelector(".card-info").textContent.includes(card)) {
          const probElement = cardElement.querySelector(".probability");
          const currentProb = parseInt(probElement.textContent.replace('%', '')) / 100;
          probElement.textContent = `${Math.min(currentProb + probability, 1) * 100}%`;
        }
      });
    }
  }

  function updateProbabilities() {
    const allCards = Object.keys(CARTES);
    const playerProbabilities = {
      partenaire: {},
      adversaire1: {},
      adversaire2: {},
    };

    couleurs.forEach((suit) => {
      allCards.forEach((card) => {
        const cardId = `${card}-${suit}`;

        if (!selectedCards.has(cardId)) {
          playerProbabilities.partenaire[cardId] = calculateCardProbability(
            card,
            suit,
            "partenaire",
            biddingHistory
          );
          playerProbabilities.adversaire1[cardId] = calculateCardProbability(
            card,
            suit,
            "adversaire1",
            biddingHistory
          );
          playerProbabilities.adversaire2[cardId] = calculateCardProbability(
            card,
            suit,
            "adversaire2",
            biddingHistory
          );
        }
      });
    });

    assignCardsToPlayers(playerProbabilities);
  }

  function calculateCardProbability(card, suit, playerType, bidHistory) {
    if (selectedCards.has(`${card}-${suit}`)) return 0;

    let probability = 0.33; // Probabilité de base

    bidHistory.forEach((bid) => {
      if (bid.type === "enchere") {
        if (bid.player === playerType) {
          // Si le joueur a enchéri sur la couleur, augmente la probabilité pour cette couleur
          probability *= bid.suit === suit ? 1.8 : 0.5;
        } else {
          // Si un autre joueur a enchéri sur la couleur, diminue la probabilité
          probability *= bid.suit === suit ? 0.3 : 1.1;
        }
      }
    });

    return Math.min(probability, 1); // Limiter la probabilité à 1
  }

function detectCombinations() {
  const combinationsDiv = document.getElementById("combinations");
  combinationsDiv.innerHTML = ""; // Réinitialiser l'affichage

  const selectedCardsBySuit = {};
  couleurs.forEach((suit) => {
    selectedCardsBySuit[suit] = [];
  });

  // Regrouper les cartes sélectionnées par couleur
  selectedCards.forEach((cardId) => {
    const [card, suit] = cardId.split("-");
    selectedCardsBySuit[suit].push(card);
  });

  // Détecter les combinaisons
  for (const suit in selectedCardsBySuit) {
    const cards = selectedCardsBySuit[suit].sort((a, b) => CARTES[a] - CARTES[b]);

    // Détection du carré (4 cartes identiques)
    if (cards.length >= 4) {
      combinationsDiv.innerHTML += `<p>Vous avez un carré de ${suit}.</p>`;
    }

    // Détection du tiers (3 cartes consécutives)
    for (let i = 0; i < cards.length - 2; i++) {
      const card1 = CARTES[cards[i]];
      const card2 = CARTES[cards[i + 1]];
      const card3 = CARTES[cards[i + 2]];
      if (card2 === card1 + 1 && card3 === card2 + 1) {
        combinationsDiv.innerHTML += `<p>Vous avez un tiers en ${cards[i]}, ${cards[i + 1]}, ${cards[i + 2]} de ${suit}.</p>`;
      }
    }

    // Détection de la belote (Roi et Dame de la même couleur)
    if (cards.includes("Roi") && cards.includes("Dame")) {
      combinationsDiv.innerHTML += `<p>Vous avez une belote en ${suit}.</p>`;
    }
  }
}


  // function updateProbabilities() {
  //   const allCards = Object.keys(CARTES);
  //   const playerProbabilities = {
  //     partenaire: {},
  //     adversaire1: {},
  //     adversaire2: {},
  //   };

  //   couleurs.forEach((suit) => {
  //     allCards.forEach((card) => {
  //       const cardId = `${card}-${suit}`;

  //       if (!selectedCards.has(cardId)) {
  //         playerProbabilities.partenaire[cardId] = calculateCardProbability(
  //           card,
  //           suit,
  //           "partenaire",
  //           biddingHistory
  //         );
  //         playerProbabilities.adversaire1[cardId] = calculateCardProbability(
  //           card,
  //           suit,
  //           "adversaire1",
  //           biddingHistory
  //         );
  //         playerProbabilities.adversaire2[cardId] = calculateCardProbability(
  //           card,
  //           suit,
  //           "adversaire2",
  //           biddingHistory
  //         );
  //       }
  //     });
  //   });

  //   assignCardsToPlayers(playerProbabilities);
  // }

  function assignCardsToPlayers(probabilities) {
    const assignedCards = new Set();

    Object.keys(probabilities).forEach((player) => {
      const playerCards = Object.entries(probabilities[player])
        .filter(([cardId]) => !assignedCards.has(cardId))
        .sort(([, probA], [, probB]) => probB - probA);

      const container = document.getElementById(`${player}-likely-cards`);
      container.innerHTML = playerCards
        .slice(0, 8) // Limiter à 8 cartes par joueur
        .map(
          ([cardId, prob]) => `
            <div class="likely-card">
              <span class="card-info">${cardId.replace("-", " de ")}</span>
              <div class="probability">${Math.round(prob * 100)}%</div>
            </div>`
        )
        .join("");

      playerCards.slice(0, 8).forEach(([cardId]) => assignedCards.add(cardId));
    });
  }

  // Gestion des enchères
  document.getElementById("add-bid").addEventListener("click", () => {
    const player = document.getElementById("player").value;
    const bidType = document.getElementById("bid-type").value;
    const amount = document.getElementById("bid-amount").value;
    const suit = document.getElementById("bid-suit").value;

    const bid = {
      player,
      type: bidType,
      amount: bidType === "enchere" ? amount : null,
      suit: bidType === "enchere" ? suit : null,
    };

    biddingHistory.push(bid);

    const historyDiv = document.getElementById("bidding-history");
    const bidEntry = document.createElement("div");
    bidEntry.textContent =
      bidType === "passe"
        ? `${player}: Passe`
        : `${player}: ${amount} à ${suit}`;
    historyDiv.appendChild(bidEntry);

    updateProbabilities();
  });

  updateProbabilities();
}); 


</script>

<style>
 .calculator {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  background: #f5f5f5;
  border-radius: 8px;
  overflow: hidden;
}

.hand-input, .bidding-section, .probabilities {
  margin-bottom: 2rem;
  padding: 1rem;
  background: white;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.cards-selection {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
}

.suit-group {
  padding: 1rem;
  background: #f9f9f9;
  border-radius: 4px;
}

.cards {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 0.5rem;
}

.bidding-input {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;
  flex-wrap: wrap;
}

select, button {
  padding: 0.5rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  width: 100%;
}

button {
  background: #007bff;
  color: white;
  border: none;
  cursor: pointer;
}

button:hover {
  background: #0056b3;
}

#bidding-history {
  margin-top: 1rem;
  padding: 1rem;
  background: #f9f9f9;
  border-radius: 4px;
  min-height: 100px;
}

.players-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 2rem;
}

.player-cards {
  background: white;
  padding: 1rem;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.likely-cards {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.likely-card {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.5rem;
  background: #f5f5f5;
  border-radius: 4px;
}

.card-info {
  font-weight: 500;
}

.probability {
  background: #e0e0e0;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  font-size: 0.9em;
}

h2 {
  color: #333;
  margin-bottom: 1rem;
}

h3 {
  color: #666;
  margin-bottom: 0.5rem;
}

/* Mobile adjustments */
@media (max-width: 768px) {
  .calculator {
    padding: 1rem;
  }

  .bidding-input {
    flex-direction: column;
    gap: 1rem;
  }

  select, button {
    width: 100%;
  }

  .cards-selection {
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  }

  .players-grid {
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  .player-cards {
    padding: 0.5rem;
  }
}

@media (max-width: 480px) {
  .calculator {
    padding: 0.5rem;
  }

  .hand-input h2, .bidding-section h2, .probabilities h2 {
    font-size: 1.2rem;
  }

  .suit-group h3 {
    font-size: 1rem;
  }

  .cards {
    grid-template-columns: 1fr;
  }
}

</style>
